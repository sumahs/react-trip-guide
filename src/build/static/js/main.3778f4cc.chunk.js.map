{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Trip/trip.js","tourData.js","components/Triplist/triplist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","href","trip","state","showInfo","handleInfo","setState","this","props","id","city","img","name","info","removeTrip","onClick","Component","tourData","triplist","trips","console","log","sortedTrip","filter","map","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,gRCI5B,SAASC,IACpB,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAMC,IAAI,UACpB,wBAAIH,UAAU,aACV,4BACI,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,SAIJ,4BACI,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,UAIJ,wBAAIA,UAAU,UACV,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,Y,UCjBCK,E,4MACjBC,MAAO,CACHC,UAAU,G,EAEdC,WAAW,WACP,EAAKC,SAAS,CACVF,UAAW,EAAKD,MAAMC,Y,uDAGpB,IAAD,EACyBG,KAAKC,MAAMN,KAAnCO,EADD,EACCA,GAAGC,EADJ,EACIA,KAAKC,EADT,EACSA,IAAIC,EADb,EACaA,KAAKC,EADlB,EACkBA,KACjBC,EAAcP,KAAKC,MAAnBM,WACN,OACI,6BAASjB,UAAU,SACf,yBAAKA,UAAU,iBACX,yBAAKC,IAAKa,EAAKX,IAAI,eACnB,0BAAMH,UAAU,YAAYkB,QAAS,kBAAID,EAAWL,KAChD,uBAAGZ,UAAU,0BAGrB,yBAAKA,UAAU,aACX,4BAAKa,GACL,4BAAKE,GACL,mCACS,IACL,0BAAMG,QAASR,KAAKF,YAChB,uBAAGR,UAAU,+BAGpBU,KAAKJ,MAAMC,UAAY,2BAAIS,S,GA7BdG,aCHrBC,EAAW,CACtB,CACER,GAAI,EACJC,KAAM,WACNC,IAAK,qBACLC,KAAM,uBACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,QACNC,IAAK,mBACLC,KAAM,oBACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,SACNC,IAAK,oBACLC,KAAM,2BACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,QACNC,IAAK,mBACLC,KAAM,mBACNC,KACE,mJC1BeK,G,kNACjBf,MAAO,CACHgB,MAAOF,G,EAEXH,WAAa,SAAAL,GACTW,QAAQC,IAAIZ,GADE,IAGRa,EADQ,EAAKnB,MAAbgB,MACmBI,QAAO,SAAAJ,GAAK,OAAIA,EAAMV,KAAOA,KACtD,EAAKH,SAAS,CACVa,MAAOG,K,uDAGL,IAAD,OAECH,EAASZ,KAAKJ,MAAdgB,MACN,OACI,6BAAStB,UAAU,YAEXsB,EAAMK,KAAI,SAAAtB,GAAI,OAAK,kBAAC,EAAD,CAAMuB,IAAKvB,EAAKO,GAAIP,KAAMA,EACxCY,WAAY,EAAKA,qB,GAnBJE,cCYvBU,E,uKATX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC/B,EAAD,MACA,kBAAC,EAAD,W,GALUoB,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.3778f4cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12a6659f.svg\";","import React from 'react';\nimport logo from '../../logo.svg';\nimport './navbar.scss';\n\nexport default function Navbar() {\n    return (\n        <nav className=\"navbar\">\n            <img src={logo} alt=\"place\"></img>\n            <ul className=\"nav-links\">\n                <li>\n                    <a href=\"/\" className=\"nav-link\">\n                        Home\n                    </a>\n                </li>\n                <li>\n                    <a href=\"/\" className=\"nav-link\">\n                        About\n                    </a>\n                </li>\n                <li className=\"active\">\n                    <a href=\"/\" className=\"nav-link\">\n                        Trips\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    );\n}","import React, { Component} from 'react';\nimport './trip.scss';\n\nexport default class trip extends Component {\n    state ={\n        showInfo :false\n    }\n    handleInfo=()=>{\n        this.setState({\n            showInfo: !this.state.showInfo\n        });\n    }\n    render() {\n        const{id,city,img,name,info} =this.props.trip;\n        const{removeTrip} = this.props;\n        return(\n            <article className=\"trips\">\n                <div className=\"img-container\">\n                    <img src={img} alt=\"trip place\"/>\n                    <span className=\"close-btn\" onClick={()=>removeTrip(id)}>\n                        <i className=\"fas fa-window-close\"/> \n                    </span>\n                </div>\n                <div className=\"trip-info\">\n                    <h3>{city}</h3>\n                    <h4>{name}</h4>\n                    <h5>\n                        info{\" \"}\n                        <span onClick={this.handleInfo}>\n                            <i className=\"fas fa-caret-square-down\"/>\n                        </span>\n                    </h5>\n                    {this.state.showInfo && <p>{info}</p>}\n                </div>\n            </article>\n        )\n    }\n}","export const tourData = [\n  {\n    id: 1,\n    city: \"new york\",\n    img: \"./img/newyork.jpeg\",\n    name: \"new york bridge tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 2,\n    city: \"paris\",\n    img: \"./img/paris.jpeg\",\n    name: \"paris lights tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 3,\n    city: \"london\",\n    img: \"./img/london.jpeg\",\n    name: \"london royal palace tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 4,\n    city: \"tokyo\",\n    img: \"./img/tokyo.jpeg\",\n    name: \"tokyo sushi tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  }\n];\n","import React, {component, Component} from 'react';\nimport Trip from \"../Trip\";\nimport { tourData } from \"../../tourData\";\nimport './triplist.scss';\n\nexport default class triplist extends Component {\n    state ={\n        trips: tourData\n    }\n    removeTrip = id =>{\n        console.log(id);\n        const{trips} =this.state;\n        const sortedTrip = trips.filter(trips => trips.id !== id);\n        this.setState({\n            trips :sortedTrip\n        })\n    }\n    render() {\n        //console.log(this.state.tours);\n        const{trips} = this.state;\n        return(\n            <section className=\"triplist\">\n                {\n                    trips.map(trip => (<Trip key={trip.id} trip={trip}\n                         removeTrip={this.removeTrip}/>))\n                }\n            </section>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.scss';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport Navbar from './components/Navbar/Navbar';\nimport TripList from './components/Triplist/triplist';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <TripList/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}